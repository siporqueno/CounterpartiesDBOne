package com.example.webclientmysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called counterpartyProductRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CounterpartyProductRepository counterpartyProductRepository;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewCounterpartyProduct(@RequestParam String counterpartyShortName, @RequestParam String productShortName,
                                     @RequestParam boolean isBuyer, @RequestParam String isSeller,
                                     @RequestParam String isConsumer, @RequestParam String isProducer,
                                     @RequestParam String quantity) {
        // @ResponseBody means the returned String is the response, not a view counterpartyShortName
        // @RequestParam means it is a parameter from the GET or POST request

        CounterpartyProduct cp = new CounterpartyProduct();
        cp.setCounterpartyShortName(counterpartyShortName);
        cp.setProductShortName(productShortName);
        cp.setIsBuyer(isBuyer);
        cp.setIsSeller(isSeller);
        cp.setIsConsumer(isConsumer);
        cp.setIsProducer(isProducer);
        cp.setQuantity(quantity);
        counterpartyProductRepository.save(cp);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<CounterpartyProduct> getAllCounterpartyProducts() {
        // This returns a JSON or XML with the counterpartyProducts
        return counterpartyProductRepository.findAll();
    }

    @GetMapping(path = "/alltoview")
    public String getAllCounterpartyProductsToView(Model model) {
        model.addAttribute("counterpartyproducts", counterpartyProductRepository.findAll());
        return "allcounterpartyproducts";
    }

    @GetMapping(value = "/add-through-view")
    public String formAddCounterpartyProduct(Model model) {
        model.addAttribute("copro", new CounterpartyProduct());
        model.addAttribute("headerCp", "Form to add Counterparty Product");
        return "add-cp-through-view";
    }

    @PostMapping(value = "/show-through-view")
    public String submitCounterpartyProduct(@ModelAttribute CounterpartyProduct counterpartyProduct) {
        counterpartyProduct = counterpartyProductRepository.save(counterpartyProduct);
        return "redirect:/demo/submitted/" + counterpartyProduct.getCounterpartyShortName() + "/" + counterpartyProduct.getProductShortName();
    }

    @GetMapping(value = "/submitted/{co}/{pro}")
    public String showSubmittedCounterpartyProduct(ModelMap model, @PathVariable("co") String counterpartyShortName, @PathVariable("pro") String productShortName) {
        CounterpartyProduct counterpartyProduct = counterpartyProductRepository.findById(new CounterpartyProductId(counterpartyShortName, productShortName)).orElse(new CounterpartyProduct());
        model.addAttribute("counterpartyProduct", counterpartyProduct);
        model.addAttribute("headerCp", "The following entry has been successfully added to the database:");
        return "cp-processed-view";
    }

    @GetMapping(path = "/delete-through-view")
    public String formDeleteById(Model model) {
        model.addAttribute("headerCpId", "Form to delete Counterparty Product");
        model.addAttribute("coproId", new CounterpartyProductId());
        model.addAttribute("btn", "Delete");
        return "do-sth-on-cp-by-cpid-view";
    }

    @PostMapping(path = "/delete-through-view")
    public String displayDeletedById(Model model, @ModelAttribute("coproId") CounterpartyProductId counterpartyProductId) {
        CounterpartyProduct counterpartyProduct = counterpartyProductRepository.findById(counterpartyProductId).orElse(new CounterpartyProduct());
        counterpartyProductRepository.deleteById(counterpartyProductId);
        model.addAttribute("counterpartyProduct", counterpartyProduct);
        model.addAttribute("headerCp", "The following entry has been successfully deleted from the database:");
//        return "deleted-through-view";
        return "cp-processed-view";

    }

    @GetMapping(path = "/find-copro-by-coproid-view")
    public String formFindById(Model model) {
        model.addAttribute("headerCpId", "Form to search Counterparty Product by Counterparty and Product");
        model.addAttribute("coproId", new CounterpartyProductId());
        model.addAttribute("btn", "Search");
        return "do-sth-on-cp-by-cpid-view";
    }

    @PostMapping(path = "/find-copro-by-coproid-view")
    public String displayFoundById(Model model, @ModelAttribute("coproId") CounterpartyProductId counterpartyProductId) {
        CounterpartyProduct counterpartyProduct = counterpartyProductRepository.findById(counterpartyProductId).orElse(new CounterpartyProduct());
//        counterpartyProductRepository.deleteById(counterpartyProductId);
        model.addAttribute("counterpartyProduct", counterpartyProduct);
        model.addAttribute("headerCp", "The following entry has been found in the database:");
//        return "deleted-through-view";
        return "cp-processed-view";
    }

    @GetMapping(path = "")
    public String goHome() {
        return "index";
    }
}
