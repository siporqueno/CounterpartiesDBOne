package com.example.webclientmysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;

@Controller    // This means that this class is a Controller
@RequestMapping(path = "/demo") // This means URL's start with /demo (after Application path)
public class MainController {
    @Autowired // This means to get the bean called counterpartyProductRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private CounterpartyProductRepository counterpartyProductRepository;

    @GetMapping(path = "/add") // Map ONLY GET Requests
    public @ResponseBody
    String addNewCounterpartyProduct(@RequestParam String counterpartyShortName, @RequestParam String productShortName,
                                     @RequestParam String isBuyer, @RequestParam String isSeller,
                                     @RequestParam String isConsumer, @RequestParam String isProducer,
                                     @RequestParam String quantity) {
        // @ResponseBody means the returned String is the response, not a view counterpartyShortName
        // @RequestParam means it is a parameter from the GET or POST request

        CounterpartyProduct cp = new CounterpartyProduct();
        cp.setCounterpartyShortName(counterpartyShortName);
        cp.setProductShortName(productShortName);
        cp.setIsBuyer(isBuyer);
        cp.setIsSeller(isBuyer);
        cp.setIsConsumer(isConsumer);
        cp.setIsProducer(isProducer);
        cp.setQuantity(quantity);
        counterpartyProductRepository.save(cp);
        return "Saved";
    }

    @GetMapping(path = "/all")
    public @ResponseBody
    Iterable<CounterpartyProduct> getAllCounterpartyProducts() {
        // This returns a JSON or XML with the counterpartyProducts
        return counterpartyProductRepository.findAll();
    }

    @GetMapping(path = "/alltoview")
    public String getAllCounterpartyProductsToView(Model model) {
        model.addAttribute("counterpartyproducts", counterpartyProductRepository.findAll());
        return "allcounterpartyproducts";
    }

    @GetMapping(path = "/add-through-view")
    public String formAddCounterpartyProduct(Model model) {
        model.addAttribute("copro", new CounterpartyProduct());
        return "add-cp-through-view";
    }

    @PostMapping(path = "/show-through-view")
    public String submitCounterpartyProduct(@ModelAttribute CounterpartyProduct counterpartyProduct) {
        counterpartyProductRepository.save(counterpartyProduct);
        return "submitted-through-view";
    }

    @GetMapping(path = "/delete-through-view")
    public String formDeleteById(Model model) {
        model.addAttribute("coproId", new CounterpartyProductId());
        return "delete-cp-through-view";
    }

    @PostMapping(path = "/show-deleted-through-view")
    public String submitDeletedById(@ModelAttribute CounterpartyProductId counterpartyProductId) {
//        Optional<CounterpartyProduct> counterpartyProduct = counterpartyProductRepository.findById(counterpartyProductId);
        counterpartyProductRepository.deleteById(counterpartyProductId);
        return "deleted-through-view";
    }

    @GetMapping(path = "")
    public String goHome() {
        return "index";
    }
}
